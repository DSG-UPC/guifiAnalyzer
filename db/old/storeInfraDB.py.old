#testMongo.py

"""
This module implements the storing of a cnml function
in a MongoDB non-hierarchical database with a different
collection for each entity
"""

from pymongo import MongoClient

from  ...guifiwrapper.guifiwrapper import *

client = MongoClient('mongodb://localhost:27017/')
rootZone = 2444
dbname = 'guifi_'+str(rootZone)
db = client[dbname]
dbZones = db.zones
dbNodes = db.nodes
dbDevices = db.devices
dbServices = db.services
dbRadios = db.radios
dbInterfaces = db.interfaces
dbLinks = db.links

g = CNMLWrapper(2444)

def mongoiseZone(zone):
    mZone = vars(zone)
    mZone['_id'] = str(mZone['id'])
    del mZone['id']
    mZone['subzones'] = [str(z) for z in mZone['subzones']]
    mZone['nodes'] = [str(n) for n in mZone['nodes']]
    return mZone


def mongoiseNode(node):
    mNode = vars(node)
    # Use node id as MongoDB id
    mNode['_id'] = str(mNode['id'])
    #print type(mNode['_id'])
    # Delete old id element
    del mNode['id']
    # Keep id of parentZone
    mNode['parentZone'] = str(mNode['parentZone'].id)
    # Keep an array of device ids
    mNode['devices'] = [str(d) for d in mNode['devices']]
    mNode['services'] = [str(d) for d in mNode['services']]
    return mNode

def mongoiseService(service):
    mService = vars(service)
    mService['_id'] = str(mService['id'])
    del mService['id']
    mService['parentDevice'] = str(mService['parentDevice'].id)
    return mService

def mongoiseDevice(device):
    mDevice = vars(device)
    mDevice['_id'] = str(mDevice['id'])
    del mDevice['id']
    mDevice['parentNode'] = str(mDevice['parentNode'].id)
    mDevice['radios'] = [str(d) for d in mDevice['radios']]
    mDevice['interfaces'] = [str(d) for d in mDevice['interfaces']]
    return mDevice

def mongoiseRadio(radio):
    mRadio = vars(radio)
    mRadio['_id'] = {'device':str(mRadio['parentDevice'].id), 'radio':str(mRadio['id'])}
    del mRadio['id']
    mRadio['parentDevice'] = str(mRadio['parentDevice'].id)
    mRadio['interfaces'] = [str(d) for d in mRadio['interfaces']]
    return mRadio

def mongoiseInterface(interface):
    mInterface = vars(interface)
    mInterface['_id'] = str(mInterface['id'])
    del mInterface['id']
    # Watch out that the parent can be either radio or device
    mInterface['parent'] = str(mInterface['parentRadio'].id)
    del mInterface['parentRadio']
    mInterface['links'] = [str(d) for d in mInterface['links']]
    return mInterface


def mongoiseLink(link):
    mLink = vars(link)
    mLink['_id'] = str(mLink['id'])
    del mLink['id']
    mLink['nodeA'] = str(mLink['nodeA'].id)
    mLink['nodeB'] = str(mLink['nodeB'].id)
    mLink['deviceA'] = str(mLink['deviceA'].id)
    mLink['deviceB'] = str(mLink['deviceB'].id)
    mLink['interfaceA'] = str(mLink['interfaceA'].id)
    mLink['interfaceB'] = str(mLink['interfaceB'].id)
    mLink['parentInterface'] = str(mLink['parentInterface'].id)
    return mLink

# Prepare data to add them in MongoDB
# Add only workingZone versions
zones = [mongoiseZone(zone.workingZone) for zone in g.zones.values() ]
dbZones.insert_many(zones)
nodes = [mongoiseNode(node) for node in g.nodes.values()]
dbNodes.insert_many(nodes)
devices = [mongoiseDevice(device) for device in g.devices.values()]
dbDevices.insert_many(devices)
services = [mongoiseService(service) for service in g.services.values()]
dbServices.insert_many(services)
radios = [mongoiseRadio(radio) for radio in g.radios.values()]
dbRadios.insert_many(radios)
interfaces = [mongoiseInterface(interface) for interface in g.ifaces.values()]
dbInterfaces.insert_many(interfaces)
links = [mongoiseLink(link) for link in g.links.values()]
dbLinks.insert_many(links)






#index working nodes or store only working nodes and working in general?
#index devices?